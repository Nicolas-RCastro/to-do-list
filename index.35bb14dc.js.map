{"mappings":"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","sources":["src/controller.js","src/model.js"],"sourcesContent":["import { state } from \"./model\";\r\n//verifica o state onde as informações da lista ficam salvas no session manager\r\n//e a converte para texto\r\nif (!sessionStorage.getItem('state'))\r\n    sessionStorage.setItem('state', JSON.stringify(state));\r\n\r\n    function addEventListeners() {\r\n        const taskInputField = document.querySelector(\"#taskInput\");\r\n        const buttonInputField = document.querySelector(\"#taskButton\");\r\n      \r\n        taskInputField.addEventListener(\"blur\", addTaskOnBlur);\r\n        buttonInputField.addEventListener(\"click\", addTaskOnButtonClick);\r\n      \r\n        const radioInput = document.querySelectorAll(\".radioinput\");\r\n        radioInput.forEach((el) =>\r\n          el.addEventListener(\"change\", (e) => {\r\n            const actualState = JSON.parse(sessionStorage.getItem(\"state\"));\r\n            const id = e.target.attributes[0].textContent;\r\n            const toChange = actualState.task.find((el) => el.id == id);\r\n      \r\n            toChange.isCompleted = !toChange.isCompleted;\r\n      \r\n            actualState.completedTasks += 1;\r\n            document.querySelector(\r\n              \"#completeTasks\"\r\n            ).textContent = `${actualState.completedTasks} de ${actualState.task.length}`;\r\n            sessionStorage.setItem(\"state\", JSON.stringify(actualState));\r\n      \r\n            renderTasks();\r\n          })\r\n        );\r\n        if (JSON.parse(sessionStorage.getItem(\"state\")).task.length) {\r\n          const trashCan = document.querySelector(\".trashCan\");\r\n          trashCan.addEventListener(\"click\", (e) => {\r\n            const actualState = JSON.parse(sessionStorage.getItem(\"state\"));\r\n            const id = e.srcElement.id;\r\n            actualState.task.splice(\r\n              actualState.task.findIndex((e) => e.id == id),\r\n              1\r\n            );\r\n      \r\n            if (actualState.completedTasks) actualState.completedTasks -= 1;\r\n      \r\n            document.querySelector(\"#createdTasks\").textContent =\r\n              actualState.task.length;\r\n            document.querySelector(\r\n              \"#completeTasks\"\r\n            ).textContent = `${actualState.completedTasks} de ${actualState.task.length}`;\r\n      \r\n            sessionStorage.setItem(\"state\", JSON.stringify(actualState));\r\n            renderTasks();\r\n          });\r\n        }\r\n      }\r\n    if (JSON.parse(sessionStorage.getItem('state'))\r\n        .task.length) {\r\n//cria as lixeiras com evento para deletar as tarefas\r\n        const trashCan = document.querySelector('.trashCan');\r\n        trashCan.addEventListener('click', (e) => {            \r\n\r\n            const actualState = JSON.parse(sessionStorage.getItem('state'));\r\n            const id = e.srcElement.id;\r\n            const toChange = new Object(actualState.task.find((el) => el.id == id));\r\n            const newArray = actualState.task.filter((el) => el.id !== id);\r\n            actualState.task.splice(actualState.task.findIndex(e=>e.id==id),1)\r\n\r\n//atualiza os contadores conforme a deleção dos eventos\r\n            document.querySelector(\"#createdTasks\").textContent = actualState.task.length && actualState.task.length - 1 ||0;\r\n            document.querySelector('#completeTasks').textContent = `${toChange.isCompleted && actualState.completedTasks -1 ||  actualState.completedTasks} de ${!actualState.task.length?0:actualState.task.length - 1}`\r\n\r\n\r\n//atualiza as tarefas deletadas para o session manager\r\n            sessionStorage.setItem('state', JSON.stringify(actualState));\r\n            renderTasks();\r\n        })\r\n    }\r\n\r\nfunction addTaskOnBlur(e) {\r\n    const actualState = JSON.parse(sessionStorage.getItem('state'));\r\n    actualState.inputActualValue = e.target.value;\r\n    sessionStorage.setItem('state', JSON.stringify(actualState));\r\n\r\n}\r\nfunction addTaskOnButtonClick(e) {\r\n    const actualState = JSON.parse(sessionStorage.getItem('state'));\r\n    if (!actualState.inputActualValue) return;\r\n//cria o formato da tarefa usando a data atual como id unico\r\n//(vanilla js não tem gerador de ID nativo)\r\n    actualState.task.push({ id: Date.now(), task: actualState.inputActualValue, isCompleted: false });\r\n    sessionStorage.setItem('state', JSON.stringify(actualState));\r\n//atualiza os contadores conforme a adição dos eventos\r\n    document.querySelector(\"#createdTasks\").textContent = actualState.task.length;\r\n    document.querySelector('#completeTasks').textContent = `${actualState.completedTasks} de ${actualState.task.length}`\r\n\r\n\r\n    renderTasks();\r\n\r\n}\r\n\r\n\r\n\r\n//cria função para renderizar as tarefas que vão sobrescrever o placeHolder\r\nfunction renderTasks() {\r\n\r\n    const actualState = JSON.parse(sessionStorage.getItem('state'));\r\n    const taskHtmlArray = actualState.task.map(({ id, task, isCompleted }) => {\r\n\r\n        if (!isCompleted) return `\r\n        <div class=\"taskWrapper\">\r\n            <input id='${id}' class=\"radioinput\" type=\"radio\"/>\r\n            <section>\r\n                <span >${task}</span>\r\n                <div class=\"trashCan\" >\r\n                    <span id='${id}' class=\"material-symbols-outlined\">\r\n                    delete\r\n                    </span>\r\n                </div>\r\n            </section>            \r\n        </div>`\r\n        else\r\n            return `\r\n        <div class=\"taskWrapper\">\r\n            <input id='${id}' class=\"radioinput\"checked type=\"radio\"/>\r\n            <section>\r\n                <span class=\"TaskCompleted\">${task}</span>\r\n                <div class=\"trashCan\">\r\n                    <span id='${id}' class=\"material-symbols-outlined\">\r\n                    delete\r\n                    </span>\r\n                </div>\r\n            </section>\r\n        </div>`\r\n    })\r\n//cria a mensagem que deve aparecer caso nenhuma tarefa tenha sido criada\r\n    const taskManagerPlaceHolder = `<div class=\"taskManagerPlaceHolderEmpty\">\r\n    <p><strong>Voce ainda nao tem tarefas cadastradas</strong></p>\r\n    <p>Crie tarefas e organize seus items a fazer</p>\r\n    </div>`\r\n//sobrescreve o placeHolder caso exista ao menos uma tarefa\r\n    if (taskHtmlArray.length > 0) {\r\n        let concatString = ''\r\n        taskHtmlArray.forEach(el => concatString = concatString + el)\r\n        document.querySelector('.taskManagerContainer').innerHTML = concatString;\r\n    }\r\n    else\r\n        document.querySelector('.taskManagerContainer').innerHTML = taskManagerPlaceHolder;\r\n\r\n    addEventListeners();\r\n}\r\nrenderTasks();\r\n\r\n\r\n\r\n\r\n","export const state = {\r\n    task:[],\r\n    inputActualValue:'',\r\n    completedTasks:0\r\n\r\n}\r\n\r\n"],"names":["sessionStorage","getItem","setItem","JSON","stringify","task","inputActualValue","completedTasks","parse","length","document","querySelector","addEventListener","e","actualState","id","srcElement","toChange","Object","find","el","filter","splice","findIndex","textContent","isCompleted","$d63a8266effe4d07$var$renderTasks","$d63a8266effe4d07$var$addTaskOnBlur","target","value","$d63a8266effe4d07$var$addTaskOnButtonClick","push","Date","now","taskHtmlArray","map","concatString","forEach","innerHTML","taskInputField","buttonInputField","querySelectorAll","attributes","$d63a8266effe4d07$var$addEventListeners"],"version":3,"file":"index.35bb14dc.js.map"}